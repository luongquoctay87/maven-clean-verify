# Define a 'Service' To Expose MySQL to Other Services
apiVersion: v1
kind: Service
metadata:
  name: postgres
  labels:
    app: postgres
    tier: database
spec:
  ports:
    - port: 5432
      targetPort: 5432
  selector:
    app: postgres
    tier: database
  clusterIP: None # DNS is used, so clusterIP is not needed
---
# Define a 'Persistent Volume Claim'(PVC) for MySQL Storage, dynamically provisioned by cluster
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim # name of PVC essential for identifying the storage data
  labels:
    app: postgres
    tier: database
spec:
  accessModes:
    - ReadWriteOnce   #This specifies the mode of the claim that we are trying to create.
  resources:
    requests:
      storage: 2Gi    #This will tell kubernetes about the amount of space we are trying to claim.
---
# Deployment specification begins here
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  labels:
    app: postgres
    tier: database
spec:
  selector: #Postgres Pod Should contain same labels
    matchLabels:
      app: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels: #Must match 'Service' and 'Deployment' selectors
        app: postgres
        tier: database
    spec:
      containers:
        - name: postgres
          image: postgres
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-secret
                  key: password
            - name: POSTGRES_URL
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: host
            - name: POSTGRES_DATABASE
              valueFrom:
                configMapKeyRef:
                  name: postgres-config
                  key: dbName
          ports:
            - containerPort: 5432
              name: postgres
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-persistence-storage
            - mountPath: /docker-entrypoint-initdb.d
              name: postgres-initdb
      volumes:
        - name: postgres-persistence-storage
          persistentVolumeClaim:
            claimName: postgres-pv-claim
        - name: postgres-initdb
          configMap:
            name: postgres-initdb-config